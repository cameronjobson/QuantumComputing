{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveCanvas.js\",\n  _s = $RefreshSig$();\n// WaveCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveCanvas = ({\n  points,\n  intensity\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height); // Clear the canvas before drawing\n    // Draw vertical lines based on the intensity array\n    function mapIntensity(intensity, maxIntensity) {\n      return intensity / maxIntensity;\n    }\n    points.forEach((point, index) => {\n      const x = index / points.length * width;\n      // get the maximum value of the intensity array\n      const maxIntensity = Math.max(...intensity);\n      // divide all in the intensity array by the max intensity\n\n      intensity = intensity.map(intensity => mapIntensity(intensity, maxIntensity));\n      // scale the intensity array to 0-255\n      const brightness = intensity[index] * 255; // Scale brightness to 0-255\n      const color = `rgb(${brightness},${brightness},${brightness})`;\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(x, 0); // Start at the top of the canvas\n      ctx.lineTo(x, height); // Draw to the bottom of the canvas\n      ctx.stroke(); // Execute the drawing command\n    });\n  }, [points, intensity]); // Redraw when points or intensity arrays change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 500,\n    height: 200,\n    style: {\n      backgroundColor: '#fff'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(WaveCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = WaveCanvas;\nexport default WaveCanvas;\nvar _c;\n$RefreshReg$(_c, \"WaveCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","WaveCanvas","points","intensity","_s","canvasRef","canvas","current","ctx","getContext","width","height","clearRect","mapIntensity","maxIntensity","forEach","point","index","x","length","Math","max","map","brightness","color","strokeStyle","beginPath","moveTo","lineTo","stroke","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveCanvas.js"],"sourcesContent":["// WaveCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\n\nconst WaveCanvas = ({ points, intensity }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => { \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height); // Clear the canvas before drawing\n    // Draw vertical lines based on the intensity array\n    function mapIntensity(intensity,maxIntensity){\n      \n      return intensity/maxIntensity;\n    }\n    points.forEach((point, index) => {\n      const x = (index / points.length) * width;\n      // get the maximum value of the intensity array\n      const maxIntensity = Math.max(...intensity);\n      // divide all in the intensity array by the max intensity\n      \n      intensity = intensity.map(intensity => mapIntensity(intensity,maxIntensity));\n      // scale the intensity array to 0-255\n      const brightness = intensity[index] *255;  // Scale brightness to 0-255\n      const color = `rgb(${brightness},${brightness},${brightness})`;\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(x, 0);  // Start at the top of the canvas\n      ctx.lineTo(x, height);  // Draw to the bottom of the canvas\n      ctx.stroke();  // Execute the drawing command\n    });\n  }, [points, intensity]);  // Redraw when points or intensity arrays change\n\n  return <canvas ref={canvasRef} width={500} height={200} style={{ backgroundColor: '#fff' }} />;\n};\n\nexport default WaveCanvas;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,MAAMQ,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAM;IAE5BH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEF,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC;IACpC;IACA,SAASE,YAAYA,CAACV,SAAS,EAACW,YAAY,EAAC;MAE3C,OAAOX,SAAS,GAACW,YAAY;IAC/B;IACAZ,MAAM,CAACa,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC/B,MAAMC,CAAC,GAAID,KAAK,GAAGf,MAAM,CAACiB,MAAM,GAAIT,KAAK;MACzC;MACA,MAAMI,YAAY,GAAGM,IAAI,CAACC,GAAG,CAAC,GAAGlB,SAAS,CAAC;MAC3C;;MAEAA,SAAS,GAAGA,SAAS,CAACmB,GAAG,CAACnB,SAAS,IAAIU,YAAY,CAACV,SAAS,EAACW,YAAY,CAAC,CAAC;MAC5E;MACA,MAAMS,UAAU,GAAGpB,SAAS,CAACc,KAAK,CAAC,GAAE,GAAG,CAAC,CAAE;MAC3C,MAAMO,KAAK,GAAI,OAAMD,UAAW,IAAGA,UAAW,IAAGA,UAAW,GAAE;MAC9Df,GAAG,CAACiB,WAAW,GAAGD,KAAK;MACvBhB,GAAG,CAACkB,SAAS,CAAC,CAAC;MACflB,GAAG,CAACmB,MAAM,CAACT,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;MACnBV,GAAG,CAACoB,MAAM,CAACV,CAAC,EAAEP,MAAM,CAAC,CAAC,CAAE;MACxBH,GAAG,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAE;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3B,MAAM,EAAEC,SAAS,CAAC,CAAC,CAAC,CAAE;;EAE1B,oBAAOH,OAAA;IAAQ8B,GAAG,EAAEzB,SAAU;IAACK,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAACoB,KAAK,EAAE;MAAEC,eAAe,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChG,CAAC;AAAChC,EAAA,CAlCIH,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAoChB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}