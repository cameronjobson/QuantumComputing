{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/ObserverEffectCanvas.js\",\n  _s = $RefreshSig$();\n// ObserverEffectCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ObserverEffectCanvas = ({\n  points,\n  intensity,\n  measure\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const dotRadius = 2;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height);\n    if (measure) {\n      // If measurement is true, collapse the wave function (no interference pattern)\n      drawPhotons(ctx, width, height, points, intensity);\n    }\n  }, [points, intensity, measure]);\n  function drawPhotons(ctx, width, height, points, intensity) {\n    const scale = height / Math.max(...intensity);\n    const maxIntensity = Math.max(...intensity);\n    ctx.fillStyle = 'blue';\n    points.forEach((point, index) => {\n      const x = index / points.length * width;\n      const y = height - intensity[index] * scale; // Invert y-axis for canvas\n      const brightness = intensity[index] / maxIntensity; // Normalize brightness\n      const dotSize = dotRadius * brightness;\n      ctx.beginPath();\n      ctx.arc(x, y, dotSize, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 500,\n    height: 200,\n    style: {\n      backgroundColor: '#fff'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n_s(ObserverEffectCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ObserverEffectCanvas;\nexport default ObserverEffectCanvas;\nvar _c;\n$RefreshReg$(_c, \"ObserverEffectCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","ObserverEffectCanvas","points","intensity","measure","_s","canvasRef","dotRadius","canvas","current","ctx","getContext","width","height","clearRect","drawPhotons","scale","Math","max","maxIntensity","fillStyle","forEach","point","index","x","length","y","brightness","dotSize","beginPath","arc","PI","fill","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/ObserverEffectCanvas.js"],"sourcesContent":["// ObserverEffectCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\n\nconst ObserverEffectCanvas = ({ points, intensity, measure }) => {\n  const canvasRef = useRef(null);\n  const dotRadius = 2;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height);\n\n    if (measure) {\n      // If measurement is true, collapse the wave function (no interference pattern)\n      drawPhotons(ctx, width, height, points, intensity);\n    } \n  }, [points, intensity, measure]);\n\n  function drawPhotons(ctx, width, height, points, intensity) {\n    const scale = height/Math.max(...intensity);\n    const maxIntensity = Math.max(...intensity);\n\n    ctx.fillStyle = 'blue';\n\n    points.forEach((point, index) => {\n      const x = (index / points.length) * width;\n      const y = height - intensity[index] * scale; // Invert y-axis for canvas\n      const brightness = intensity[index] / maxIntensity; // Normalize brightness\n      const dotSize = dotRadius * brightness;\n      ctx.beginPath();\n      ctx.arc(x, y, dotSize, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  }\n\n  return <canvas ref={canvasRef} width={500} height={200} style={{ backgroundColor: '#fff' }} />;\n};\n\nexport default ObserverEffectCanvas;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC/D,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMU,SAAS,GAAG,CAAC;EAEnBT,SAAS,CAAC,MAAM;IACd,MAAMU,MAAM,GAAGF,SAAS,CAACG,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAM;IAC5BH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEF,KAAK,EAAEC,MAAM,CAAC;IAElC,IAAIT,OAAO,EAAE;MACX;MACAW,WAAW,CAACL,GAAG,EAAEE,KAAK,EAAEC,MAAM,EAAEX,MAAM,EAAEC,SAAS,CAAC;IACpD;EACF,CAAC,EAAE,CAACD,MAAM,EAAEC,SAAS,EAAEC,OAAO,CAAC,CAAC;EAEhC,SAASW,WAAWA,CAACL,GAAG,EAAEE,KAAK,EAAEC,MAAM,EAAEX,MAAM,EAAEC,SAAS,EAAE;IAC1D,MAAMa,KAAK,GAAGH,MAAM,GAACI,IAAI,CAACC,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC3C,MAAMgB,YAAY,GAAGF,IAAI,CAACC,GAAG,CAAC,GAAGf,SAAS,CAAC;IAE3CO,GAAG,CAACU,SAAS,GAAG,MAAM;IAEtBlB,MAAM,CAACmB,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC/B,MAAMC,CAAC,GAAID,KAAK,GAAGrB,MAAM,CAACuB,MAAM,GAAIb,KAAK;MACzC,MAAMc,CAAC,GAAGb,MAAM,GAAGV,SAAS,CAACoB,KAAK,CAAC,GAAGP,KAAK,CAAC,CAAC;MAC7C,MAAMW,UAAU,GAAGxB,SAAS,CAACoB,KAAK,CAAC,GAAGJ,YAAY,CAAC,CAAC;MACpD,MAAMS,OAAO,GAAGrB,SAAS,GAAGoB,UAAU;MACtCjB,GAAG,CAACmB,SAAS,CAAC,CAAC;MACfnB,GAAG,CAACoB,GAAG,CAACN,CAAC,EAAEE,CAAC,EAAEE,OAAO,EAAE,CAAC,EAAE,CAAC,GAAGX,IAAI,CAACc,EAAE,CAAC;MACtCrB,GAAG,CAACsB,IAAI,CAAC,CAAC;IACZ,CAAC,CAAC;EACJ;EAEA,oBAAOhC,OAAA;IAAQiC,GAAG,EAAE3B,SAAU;IAACM,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAACqB,KAAK,EAAE;MAAEC,eAAe,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChG,CAAC;AAAClC,EAAA,CAnCIJ,oBAAoB;AAAAuC,EAAA,GAApBvC,oBAAoB;AAqC1B,eAAeA,oBAAoB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}