{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/diagramComponent.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles\n}) => {\n  const slitWidth = 10;\n  const visualScalingFactor = .1;\n  const personalSeperation = slitSeparation * visualScalingFactor;\n  const personalDistance = distance * visualScalingFactor;\n  console.log(wavelength, distance, slitSeparation, showParticles);\n  console.log(personalDistance);\n  const drawCanvas = ctx => {\n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n    const drawLine = (info, style = {}) => {\n      const {\n        x,\n        y,\n        x1,\n        y1\n      } = info;\n      const {\n        color = \"black\",\n        width = 1\n      } = style;\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x1, y1);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    };\n\n    // Draw slits\n    ctx.fillStyle = \"green\";\n    ctx.fillRect(canvasWidth / 2 - personalSeperation / 2, canvasHeight - 10, slitWidth, personalDistance);\n    ctx.fillRect(canvasWidth / 2 + personalSeperation / 2, canvasHeight - 10, slitWidth, slitWidth);\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 + slitWidth,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2 + slitWidth,\n      y1: canvasHeight + personalDistance - 10\n    });\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n\n    // Draw wave pattern\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: 500,\n      height: distance / 30,\n      ref: canvas => canvas && drawCanvas(canvas.getContext(\"2d\"))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_c = DoubleSlit;\nexport default DoubleSlit;\nvar _c;\n$RefreshReg$(_c, \"DoubleSlit\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DoubleSlit","wavelength","distance","slitSeparation","showParticles","slitWidth","visualScalingFactor","personalSeperation","personalDistance","console","log","drawCanvas","ctx","clearRect","canvas","width","height","canvasWidth","canvasHeight","drawLine","info","style","x","y","x1","y1","color","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","fillStyle","fillRect","children","ref","getContext","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/diagramComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n}) => {\n  const slitWidth = 10\n\n\n  const visualScalingFactor = .1\n  const personalSeperation = slitSeparation * visualScalingFactor\n  const personalDistance = distance * visualScalingFactor\n  console.log(wavelength, distance, slitSeparation, showParticles)\n  console.log(personalDistance)\n\n  \n\n  const drawCanvas = (ctx) => {\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n    const drawLine = (info, style = {}) => {\n      const { x, y, x1, y1 } = info;\n      const { color = \"black\", width = 1 } = style;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x1, y1);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    };\n\n    // Draw slits\n    ctx.fillStyle = \"green\";\n    ctx.fillRect(\n      canvasWidth / 2 - personalSeperation / 2,\n      canvasHeight - 10,\n      slitWidth,\n      personalDistance\n    );\n\n    ctx.fillRect(\n      canvasWidth / 2 + personalSeperation / 2,\n      canvasHeight - 10,\n      slitWidth,\n      slitWidth\n    );\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2,\n      y1: canvasHeight+personalDistance-10,\n    });\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 + slitWidth,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2 + slitWidth,\n      y1: canvasHeight + personalDistance - 10,\n    });\n\n\n\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2,\n      y1: canvasHeight + personalDistance - 10,\n    });\n\n\n    // Draw wave pattern\n\n  };\n  return (\n    <div>\n      <canvas\n        width={500}\n        height={distance/30}\n        ref={(canvas) => canvas && drawCanvas(canvas.getContext(\"2d\"))}\n      />\n    </div>\n  );\n};\n\nexport default DoubleSlit;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}