{"ast":null,"code":"// ParticleCanvas.js\nimport React,{useRef,useEffect}from'react';import{wavelengthToColor}from'./WaveCanvas';import{jsx as _jsx}from\"react/jsx-runtime\";const ParticleCanvas=_ref=>{let{points,probabilityDensity,numPhotons,wavelength}=_ref;const canvasRef=useRef(null);useEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');const width=canvas.width;const height=canvas.height;ctx.clearRect(0,0,width,height);// Clear the canvas\n// ctx.fillStyle = 'blue';\n// make the background black\nctx.fillStyle='black';ctx.fillRect(0,0,width,height);const color=wavelengthToColor(wavelength,1);ctx.fillStyle=color;console.log(color);for(let i=0;i<numPhotons;i++){const pointIndex=weightedRandom(probabilityDensity);const x=pointIndex/points.length*width;// the above splits the possible points into a fraction of the width\nctx.fillRect(x,Math.random()*height,1,1);// Simulate each photon as a small dot at a random height\n}},[points,probabilityDensity,numPhotons]);// Re-run effect when numPhotons changes\nfunction weightedRandom(prob){let sum=prob.reduce((a,b)=>a+b,0);let acc=0;let chances=prob.map(p=>acc=p/sum+acc);let random=Math.random();let idx=chances.findIndex(chance=>random<chance);return idx;}return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:1000,height:200,style:{backgroundColor:'#fff'}});};export default ParticleCanvas;","map":{"version":3,"names":["React","useRef","useEffect","wavelengthToColor","jsx","_jsx","ParticleCanvas","_ref","points","probabilityDensity","numPhotons","wavelength","canvasRef","canvas","current","ctx","getContext","width","height","clearRect","fillStyle","fillRect","color","console","log","i","pointIndex","weightedRandom","x","length","Math","random","prob","sum","reduce","a","b","acc","chances","map","p","idx","findIndex","chance","ref","style","backgroundColor"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/ParticleCanvas.js"],"sourcesContent":["// ParticleCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { wavelengthToColor } from './WaveCanvas'; \nconst ParticleCanvas = ({ points, probabilityDensity, numPhotons,wavelength }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height); // Clear the canvas\n    \n    // ctx.fillStyle = 'blue';\n    // make the background black\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, width, height);\n\n    const color = wavelengthToColor(wavelength,1);\n    ctx.fillStyle = color;\n    console.log(color)\n\n    for (let i = 0; i < numPhotons; i++) {\n      const pointIndex = weightedRandom(probabilityDensity);\n      const x = (pointIndex / points.length) * width;\n      // the above splits the possible points into a fraction of the width\n      ctx.fillRect(x, Math.random() * height, 1, 1); // Simulate each photon as a small dot at a random height\n    }\n  }, [points, probabilityDensity, numPhotons]); // Re-run effect when numPhotons changes\n\n  function weightedRandom(prob) {\n    let sum = prob.reduce((a, b) => a + b, 0);\n    let acc = 0;\n    let chances = prob.map(p => (acc = p / sum + acc));\n    let random = Math.random();\n    let idx = chances.findIndex(chance => random < chance);\n    return idx;\n  }\n\n  return <canvas ref={canvasRef} width={1000} height={200} style={{ backgroundColor: '#fff' }} />;\n};\n\nexport default ParticleCanvas;\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAChD,OAASC,iBAAiB,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBACjD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAA2D,IAA1D,CAAEC,MAAM,CAAEC,kBAAkB,CAAEC,UAAU,CAACC,UAAW,CAAC,CAAAJ,IAAA,CAC3E,KAAM,CAAAK,SAAS,CAAGX,MAAM,CAAC,IAAI,CAAC,CAE9BC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,MAAM,CAAGD,SAAS,CAACE,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CACnC,KAAM,CAAAC,KAAK,CAAGJ,MAAM,CAACI,KAAK,CAC1B,KAAM,CAAAC,MAAM,CAAGL,MAAM,CAACK,MAAM,CAE5BH,GAAG,CAACI,SAAS,CAAC,CAAC,CAAE,CAAC,CAAEF,KAAK,CAAEC,MAAM,CAAC,CAAE;AAEpC;AACA;AACAH,GAAG,CAACK,SAAS,CAAG,OAAO,CACvBL,GAAG,CAACM,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAEJ,KAAK,CAAEC,MAAM,CAAC,CAEjC,KAAM,CAAAI,KAAK,CAAGnB,iBAAiB,CAACQ,UAAU,CAAC,CAAC,CAAC,CAC7CI,GAAG,CAACK,SAAS,CAAGE,KAAK,CACrBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAElB,IAAK,GAAI,CAAAG,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGf,UAAU,CAAEe,CAAC,EAAE,CAAE,CACnC,KAAM,CAAAC,UAAU,CAAGC,cAAc,CAAClB,kBAAkB,CAAC,CACrD,KAAM,CAAAmB,CAAC,CAAIF,UAAU,CAAGlB,MAAM,CAACqB,MAAM,CAAIZ,KAAK,CAC9C;AACAF,GAAG,CAACM,QAAQ,CAACO,CAAC,CAAEE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGb,MAAM,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE;AACjD,CACF,CAAC,CAAE,CAACV,MAAM,CAAEC,kBAAkB,CAAEC,UAAU,CAAC,CAAC,CAAE;AAE9C,QAAS,CAAAiB,cAAcA,CAACK,IAAI,CAAE,CAC5B,GAAI,CAAAC,GAAG,CAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CACzC,GAAI,CAAAC,GAAG,CAAG,CAAC,CACX,GAAI,CAAAC,OAAO,CAAGN,IAAI,CAACO,GAAG,CAACC,CAAC,EAAKH,GAAG,CAAGG,CAAC,CAAGP,GAAG,CAAGI,GAAI,CAAC,CAClD,GAAI,CAAAN,MAAM,CAAGD,IAAI,CAACC,MAAM,CAAC,CAAC,CAC1B,GAAI,CAAAU,GAAG,CAAGH,OAAO,CAACI,SAAS,CAACC,MAAM,EAAIZ,MAAM,CAAGY,MAAM,CAAC,CACtD,MAAO,CAAAF,GAAG,CACZ,CAEA,mBAAOpC,IAAA,WAAQuC,GAAG,CAAEhC,SAAU,CAACK,KAAK,CAAE,IAAK,CAACC,MAAM,CAAE,GAAI,CAAC2B,KAAK,CAAE,CAAEC,eAAe,CAAE,MAAO,CAAE,CAAE,CAAC,CACjG,CAAC,CAED,cAAe,CAAAxC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}