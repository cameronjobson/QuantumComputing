{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveCanvas.js\",\n  _s = $RefreshSig$();\n// WaveCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction wavelengthToColor(wavelength) {\n  var R, G, B, alpha;\n  if (wavelength >= 380 && wavelength < 440) {\n    R = -(wavelength - 440) / (440 - 380);\n    G = 0.0;\n    B = 1.0;\n  } else if (wavelength >= 440 && wavelength < 490) {\n    R = 0.0;\n    G = (wavelength - 440) / (490 - 440);\n    B = 1.0;\n  } else if (wavelength >= 490 && wavelength < 510) {\n    R = 0.0;\n    G = 1.0;\n    B = -(wavelength - 510) / (510 - 490);\n  } else if (wavelength >= 510 && wavelength < 580) {\n    R = (wavelength - 510) / (580 - 510);\n    G = 1.0;\n    B = 0.0;\n  } else if (wavelength >= 580 && wavelength < 645) {\n    R = 1.0;\n    G = -(wavelength - 645) / (645 - 580);\n    B = 0.0;\n  } else if (wavelength >= 645 && wavelength <= 750) {\n    R = 1.0;\n    G = 0.0;\n    B = 0.0;\n  } else {\n    R = 0.0;\n    G = 0.0;\n    B = 0.0; // outside the visible spectrum\n  }\n\n  // Increase intensity closer to the vision limits\n  if (wavelength > 700) {\n    alpha = 0.3 + 0.7 * (750 - wavelength) / (750 - 700);\n  } else if (wavelength < 420) {\n    alpha = 0.3 + 0.7 * (wavelength - 380) / (420 - 380);\n  } else {\n    alpha = 1.0;\n  }\n  R = Math.round(R * alpha * 255);\n  G = Math.round(G * alpha * 255);\n  B = Math.round(B * alpha * 255);\n  return `rgb(${R}, ${G}, ${B})`;\n}\n\n// Example usage:\nvar color = wavelengthToColor(500); // A wavelength of 500nm\nconsole.log(color); // Outputs: rgb(0, 255, 0)\n\nconst WaveCanvas = ({\n  points,\n  intensity\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height); // Clear the canvas before drawing\n    // Draw vertical lines based on the intensity array\n    function mapIntensity(intensity, maxIntensity) {\n      // we're just going to make it modify the tolerance on the data\n      const ceilingCover = .05 * maxIntensity;\n      let newIntensities = intensity.map(intensity => intensity / ceilingCover);\n      // if a value is greater than 1, make it 1\n      // if a value is less than 0, make it 0\n      // newIntensities = newIntensities.map((intensity) =>\n      //   intensity > 1 ? 1 : intensity\n      // );\n\n      return newIntensities;\n    }\n    points.forEach((point, index) => {\n      const x = index / points.length * width;\n      // get the maximum value of the intensity array\n      const maxIntensity = Math.max(...intensity);\n      // divide all in the intensity array by the max intensity\n\n      intensity = mapIntensity(intensity, maxIntensity);\n\n      // scale the intensity array to 0-255\n      const brightness = intensity[index]; // Scale brightness to 0-255\n      // then given some brightness, we take some RGB\n      const RGB = wavelengthToColor(750e-9);\n      const color = `rgb(${brightness * RGB[0]},${brightness * RGB[1]},${brightness * RGB[2]})`;\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(x, 0); // Start at the top of the canvas\n      ctx.lineTo(x, height); // Draw to the bottom of the canvas\n      ctx.stroke(); // Execute the drawing command\n    });\n  }, [points, intensity]); // Redraw when points or intensity arrays change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 500,\n    height: 200,\n    style: {\n      backgroundColor: '#fff'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n_s(WaveCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = WaveCanvas;\nexport default WaveCanvas;\nvar _c;\n$RefreshReg$(_c, \"WaveCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","wavelengthToColor","wavelength","R","G","B","alpha","Math","round","color","console","log","WaveCanvas","points","intensity","_s","canvasRef","canvas","current","ctx","getContext","width","height","clearRect","mapIntensity","maxIntensity","ceilingCover","newIntensities","map","forEach","point","index","x","length","max","brightness","RGB","strokeStyle","beginPath","moveTo","lineTo","stroke","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveCanvas.js"],"sourcesContent":["// WaveCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nfunction wavelengthToColor(wavelength) {\n    var R, G, B, alpha;\n\n    if (wavelength >= 380 && wavelength < 440) {\n        R = -(wavelength - 440) / (440 - 380);\n        G = 0.0;\n        B = 1.0;\n    } else if (wavelength >= 440 && wavelength < 490) {\n        R = 0.0;\n        G = (wavelength - 440) / (490 - 440);\n        B = 1.0;\n    } else if (wavelength >= 490 && wavelength < 510) {\n        R = 0.0;\n        G = 1.0;\n        B = -(wavelength - 510) / (510 - 490);\n    } else if (wavelength >= 510 && wavelength < 580) {\n        R = (wavelength - 510) / (580 - 510);\n        G = 1.0;\n        B = 0.0;\n    } else if (wavelength >= 580 && wavelength < 645) {\n        R = 1.0;\n        G = -(wavelength - 645) / (645 - 580);\n        B = 0.0;\n    } else if (wavelength >= 645 && wavelength <= 750) {\n        R = 1.0;\n        G = 0.0;\n        B = 0.0;\n    } else {\n        R = 0.0;\n        G = 0.0;\n        B = 0.0; // outside the visible spectrum\n    }\n\n    // Increase intensity closer to the vision limits\n    if (wavelength > 700) {\n        alpha = 0.3 + 0.7 * (750 - wavelength) / (750 - 700);\n    } else if (wavelength < 420) {\n        alpha = 0.3 + 0.7 * (wavelength - 380) / (420 - 380);\n    } else {\n        alpha = 1.0;\n    }\n\n    R = Math.round(R * alpha * 255);\n    G = Math.round(G * alpha * 255);\n    B = Math.round(B * alpha * 255);\n\n    return `rgb(${R}, ${G}, ${B})`;\n}\n\n// Example usage:\nvar color = wavelengthToColor(500); // A wavelength of 500nm\nconsole.log(color); // Outputs: rgb(0, 255, 0)\n\nconst WaveCanvas = ({ points, intensity }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => { \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height); // Clear the canvas before drawing\n    // Draw vertical lines based on the intensity array\n    function mapIntensity(intensity,maxIntensity){\n      // we're just going to make it modify the tolerance on the data\n      const ceilingCover = .05*maxIntensity;\n      let newIntensities = intensity.map((intensity) =>\n        intensity/ceilingCover\n      );\n      // if a value is greater than 1, make it 1\n      // if a value is less than 0, make it 0\n      // newIntensities = newIntensities.map((intensity) =>\n      //   intensity > 1 ? 1 : intensity\n      // );\n\n         \n      return newIntensities;\n    }\n    points.forEach((point, index) => {\n      const x = (index / points.length) * width;\n      // get the maximum value of the intensity array\n      const maxIntensity = Math.max(...intensity);\n      // divide all in the intensity array by the max intensity\n      \n      intensity =  mapIntensity(intensity,maxIntensity);\n\n      // scale the intensity array to 0-255\n      const brightness = intensity[index];  // Scale brightness to 0-255\n      // then given some brightness, we take some RGB\n      const RGB = wavelengthToColor(750e-9)\n\n      const color = `rgb(${brightness*RGB[0]},${brightness*RGB[1]},${brightness*RGB[2]})`;\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(x, 0);  // Start at the top of the canvas\n      ctx.lineTo(x, height);  // Draw to the bottom of the canvas\n      ctx.stroke();  // Execute the drawing command\n    });\n  }, [points, intensity]);  // Redraw when points or intensity arrays change\n\n  return <canvas ref={canvasRef} width={500} height={200} style={{ backgroundColor: '#fff' }} />;\n};\n\nexport default WaveCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}