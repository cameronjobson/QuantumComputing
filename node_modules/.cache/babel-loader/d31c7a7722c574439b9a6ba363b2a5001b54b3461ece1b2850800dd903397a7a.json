{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/ParticleCanvas.js\",\n  _s = $RefreshSig$();\n// ParticleCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { wavelengthToColor } from './WaveCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleCanvas = ({\n  points,\n  probabilityDensity,\n  numPhotons,\n  wavelength\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height); // Clear the canvas\n\n    // ctx.fillStyle = 'blue';\n    const color = wavelengthToColor(wavelength, 1);\n    ctx.fillStyle = color;\n    for (let i = 0; i < numPhotons; i++) {\n      const pointIndex = weightedRandom(probabilityDensity);\n      const x = pointIndex / points.length * width;\n      ctx.fillRect(x, Math.random() * height, 1, 1); // Simulate each photon as a small dot\n    }\n  }, [points, probabilityDensity, numPhotons]); // Re-run effect when numPhotons changes\n\n  function weightedRandom(prob) {\n    let sum = prob.reduce((a, b) => a + b, 0);\n    let acc = 0;\n    let chances = prob.map(p => acc = p / sum + acc);\n    let random = Math.random();\n    let idx = chances.findIndex(chance => random < chance);\n    return idx;\n  }\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 500,\n    height: 200,\n    style: {\n      backgroundColor: '#fff'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ParticleCanvas;\nexport default ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","wavelengthToColor","jsxDEV","_jsxDEV","ParticleCanvas","points","probabilityDensity","numPhotons","wavelength","_s","canvasRef","canvas","current","ctx","getContext","width","height","clearRect","color","fillStyle","i","pointIndex","weightedRandom","x","length","fillRect","Math","random","prob","sum","reduce","a","b","acc","chances","map","p","idx","findIndex","chance","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/ParticleCanvas.js"],"sourcesContent":["// ParticleCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nimport { wavelengthToColor } from './WaveCanvas'; \nconst ParticleCanvas = ({ points, probabilityDensity, numPhotons,wavelength }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height); // Clear the canvas\n    \n    // ctx.fillStyle = 'blue';\n    const color = wavelengthToColor(wavelength,1);\n    ctx.fillStyle = color;\n\n    for (let i = 0; i < numPhotons; i++) {\n      const pointIndex = weightedRandom(probabilityDensity);\n      const x = (pointIndex / points.length) * width;\n      ctx.fillRect(x, Math.random() * height, 1, 1); // Simulate each photon as a small dot\n    }\n  }, [points, probabilityDensity, numPhotons]); // Re-run effect when numPhotons changes\n\n  function weightedRandom(prob) {\n    let sum = prob.reduce((a, b) => a + b, 0);\n    let acc = 0;\n    let chances = prob.map(p => (acc = p / sum + acc));\n    let random = Math.random();\n    let idx = chances.findIndex(chance => random < chance);\n    return idx;\n  }\n\n  return <canvas ref={canvasRef} width={500} height={200} style={{ backgroundColor: '#fff' }} />;\n};\n\nexport default ParticleCanvas;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,iBAAiB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,MAAM;EAAEC,kBAAkB;EAAEC,UAAU;EAACC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAMC,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAM;IAE5BH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEF,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC;;IAEpC;IACA,MAAME,KAAK,GAAGjB,iBAAiB,CAACO,UAAU,EAAC,CAAC,CAAC;IAC7CK,GAAG,CAACM,SAAS,GAAGD,KAAK;IAErB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,EAAEa,CAAC,EAAE,EAAE;MACnC,MAAMC,UAAU,GAAGC,cAAc,CAAChB,kBAAkB,CAAC;MACrD,MAAMiB,CAAC,GAAIF,UAAU,GAAGhB,MAAM,CAACmB,MAAM,GAAIT,KAAK;MAC9CF,GAAG,CAACY,QAAQ,CAACF,CAAC,EAAEG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGX,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjD;EACF,CAAC,EAAE,CAACX,MAAM,EAAEC,kBAAkB,EAAEC,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE9C,SAASe,cAAcA,CAACM,IAAI,EAAE;IAC5B,IAAIC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;IACzC,IAAIC,GAAG,GAAG,CAAC;IACX,IAAIC,OAAO,GAAGN,IAAI,CAACO,GAAG,CAACC,CAAC,IAAKH,GAAG,GAAGG,CAAC,GAAGP,GAAG,GAAGI,GAAI,CAAC;IAClD,IAAIN,MAAM,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC;IAC1B,IAAIU,GAAG,GAAGH,OAAO,CAACI,SAAS,CAACC,MAAM,IAAIZ,MAAM,GAAGY,MAAM,CAAC;IACtD,OAAOF,GAAG;EACZ;EAEA,oBAAOlC,OAAA;IAAQqC,GAAG,EAAE9B,SAAU;IAACK,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAACyB,KAAK,EAAE;MAAEC,eAAe,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChG,CAAC;AAACrC,EAAA,CAhCIL,cAAc;AAAA2C,EAAA,GAAd3C,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}