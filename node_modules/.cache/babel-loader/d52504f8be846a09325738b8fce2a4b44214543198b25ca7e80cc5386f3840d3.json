{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport WaveInterference from './WaveInterference';\nimport DoubleSlit from \"./diagramComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [wavelength, setWavelength] = useState(700); // in nanometers\n  const [distance, setDistance] = useState(2000); // distance to screen in mm\n  const [slitSeparation, setSlitSeparation] = useState(250); // slit separation in micrometers\n  const [slitWidth, setSlitWidth] = useState(.1);\n  const [showParticles, setShowParticles] = useState(false);\n  const [observerEffect, setObserverEffect] = useState(false);\n  const [numPhotons, setNumPhotons] = useState(10000); // default number of photons\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Double Slit Experiment Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        style: {\n          marginRight: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Wavelength (nm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"380\",\n            max: \"750\",\n            value: wavelength,\n            onChange: e => setWavelength(Number(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), wavelength, \" nm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Distance to Screen (mm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1000\",\n            max: \"5000\",\n            value: distance,\n            onChange: e => setDistance(Number(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), distance, \" mm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Slit Seperation (\\u03BCm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"800\",\n            max: \"1500\",\n            value: slitSeparation,\n            onChange: e => setSlitSeparation(Number(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), slitSeparation, \" \\u03BCm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Slit width(\\u03BCm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"300\",\n            max: \"2000\",\n            value: slitWidth,\n            onChange: e => setSlitWidth(Number(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), slitWidth, \" \\u03BCm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Show Particles:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showParticles,\n            onChange: e => setShowParticles(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), showParticles &&\n        /*#__PURE__*/\n        // Conditionally render \"Number of Photons\" if showParticles is true\n        _jsxDEV(\"label\", {\n          children: [\"Observer Effect:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: observerEffect,\n            onChange: e => setObserverEffect(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), showParticles &&\n        /*#__PURE__*/\n        // Conditionally render \"Number of Photons\" if showParticles is true\n        _jsxDEV(\"label\", {\n          htmlFor: \"numPhotons\",\n          children: [\"Number of Photons:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"numPhotons\",\n            type: \"range\",\n            min: \"100\",\n            max: \"20000\",\n            step: \"100\",\n            value: numPhotons,\n            onChange: e => setNumPhotons(Number(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), numPhotons]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WaveInterferenceContainer\",\n          children: /*#__PURE__*/_jsxDEV(WaveInterference, {\n            wavelength: wavelength,\n            distance: distance,\n            slitSeparation: slitSeparation,\n            showParticles: showParticles,\n            observerEffect: observerEffect,\n            numPhotons: numPhotons,\n            slitWidth: slitWidth // Pass the number of photons to the WaveInterference component\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DoubleSlit, {\n            wavelength: wavelength,\n            distance: distance,\n            slitSeparation: slitSeparation,\n            showParticles: showParticles,\n            slitWidth: slitWidth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sBSdoYMXlRBwaePSkS9zRn21Cyg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WaveInterference","DoubleSlit","jsxDEV","_jsxDEV","App","_s","wavelength","setWavelength","distance","setDistance","slitSeparation","setSlitSeparation","slitWidth","setSlitWidth","showParticles","setShowParticles","observerEffect","setObserverEffect","numPhotons","setNumPhotons","className","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","type","min","max","value","onChange","e","Number","target","checked","htmlFor","id","step","flex","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport WaveInterference from './WaveInterference';\nimport DoubleSlit from \"./diagramComponent\";\nfunction App() {\n  const [wavelength, setWavelength] = useState(700); // in nanometers\n  const [distance, setDistance] = useState(2000); // distance to screen in mm\n  const [slitSeparation, setSlitSeparation] = useState(250); // slit separation in micrometers\n  const [slitWidth, setSlitWidth] = useState(.1);\n  const [showParticles, setShowParticles] = useState(false);\n    \n  const [observerEffect, setObserverEffect] = useState(false);\n  const [numPhotons, setNumPhotons] = useState(10000); // default number of photons\n\n  return (\n    <div className=\"App\" style={{ display: \"flex\" }}>\n      <header className=\"App-header\">\n        <h1>Double Slit Experiment Simulation</h1>\n      </header>\n      <div style={{ display: \"flex\" }}>\n        <div className=\"controls\" style={{ marginRight: \"1rem\" }}>\n          <label>\n            Wavelength (nm):\n            <input\n              type=\"range\"\n              min=\"380\"\n              max=\"750\"\n              value={wavelength}\n              onChange={(e) => setWavelength(Number(e.target.value))}\n            />\n            {wavelength} nm\n          </label>\n          <label>\n            Distance to Screen (mm):\n            <input\n              type=\"range\"\n              min=\"1000\"\n              max=\"5000\"\n              value={distance}\n              onChange={(e) => setDistance(Number(e.target.value))}\n            />\n            {distance} mm\n          </label>\n          <label>\n            Slit Seperation (μm):\n            <input\n              type=\"range\"\n              min=\"800\"\n              max=\"1500\"\n              value={slitSeparation}\n              onChange={(e) => setSlitSeparation(Number(e.target.value))}\n            />\n            {slitSeparation} μm\n          </label>\n          <label>\n            Slit width(μm):\n            <input\n              type=\"range\"\n              min=\"300\"\n              max=\"2000\"\n              value={slitWidth}\n              onChange={(e) => setSlitWidth(Number(e.target.value))}\n            />\n            {slitWidth} μm\n          </label>\n          <label>\n            Show Particles:\n            <input\n              type=\"checkbox\"\n              checked={showParticles}\n              onChange={(e) => setShowParticles(e.target.checked)}\n            />\n          </label>\n          {showParticles && ( // Conditionally render \"Number of Photons\" if showParticles is true\n            <label>\n              Observer Effect:\n              <input\n                type=\"checkbox\"\n                checked={observerEffect}\n                onChange={(e) => setObserverEffect(e.target.checked)}\n              />\n            </label>\n          )}\n          {showParticles && ( // Conditionally render \"Number of Photons\" if showParticles is true\n            <label htmlFor=\"numPhotons\">\n              Number of Photons:\n              <input\n                id=\"numPhotons\"\n                type=\"range\"\n                min=\"100\"\n                max=\"20000\"\n                step=\"100\"\n                value={numPhotons}\n                onChange={(e) => setNumPhotons(Number(e.target.value))}\n              />\n              {numPhotons}\n            </label>\n          )}\n        </div>\n        <div style={{ flex: 1 }}>\n          <div className=\"WaveInterferenceContainer\">\n            <WaveInterference\n              wavelength={wavelength}\n              distance={distance}\n              slitSeparation={slitSeparation}\n              showParticles={showParticles}\n              observerEffect={observerEffect}\n              numPhotons={numPhotons}\n              slitWidth={slitWidth} // Pass the number of photons to the WaveInterference component\n            />\n          </div>\n          <div>\n            <DoubleSlit\n              wavelength={wavelength}\n              distance={distance}\n              slitSeparation={slitSeparation}\n              showParticles={showParticles}\n              slitWidth={slitWidth}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}