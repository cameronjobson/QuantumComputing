{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport WaveInterference from './WaveInterference';\nimport DoubleSlit from \"./diagramComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [wavelength, setWavelength] = useState(700); // in nanometers\n  const [distance, setDistance] = useState(2000); // distance to screen in mm\n  const [slitSeparation, setSlitSeparation] = useState(250); // slit separation in micrometers\n  const [slitWidth, setSlitWidth] = useState(1);\n  const [showParticles, setShowParticles] = useState(false);\n  const [observerEffect, setObserverEffect] = useState(false);\n  const [numPhotons, setNumPhotons] = useState(10000); // default number of photons\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Double Slit Experiment Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Wavelength (nm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"380\",\n          max: \"750\",\n          value: wavelength,\n          onChange: e => setWavelength(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), wavelength, \" nm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Distance to Screen (mm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1000\",\n          max: \"5000\",\n          value: distance,\n          onChange: e => setDistance(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), distance, \" mm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Slit Separation (\\u03BCm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"300\",\n          max: \"1000\",\n          value: slitSeparation,\n          onChange: e => setSlitSeparation(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), slitSeparation, \" \\u03BCm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Slit Width (mm):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \".1\",\n          max: \"4\",\n          value: slitWidth,\n          onChange: e => setSlitWidth(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), slitWidth, \" mm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Show Particles:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showParticles,\n          onChange: e => setShowParticles(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), showParticles &&\n      /*#__PURE__*/\n      // Conditionally render \"Number of Photons\" if showParticles is true\n      _jsxDEV(\"label\", {\n        children: [\"Observer Effect:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: observerEffect,\n          onChange: e => setObserverEffect(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), showParticles &&\n      /*#__PURE__*/\n      // Conditionally render \"Number of Photons\" if showParticles is true\n      _jsxDEV(\"label\", {\n        htmlFor: \"numPhotons\",\n        children: [\"Number of Photons:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"numPhotons\",\n          type: \"range\",\n          min: \"100\",\n          max: \"20000\",\n          step: \"100\",\n          value: numPhotons,\n          onChange: e => setNumPhotons(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), numPhotons]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WaveInterferenceContainer\",\n      children: /*#__PURE__*/_jsxDEV(WaveInterference, {\n        wavelength: wavelength,\n        distance: distance,\n        slitSeparation: slitSeparation,\n        showParticles: showParticles,\n        observerEffect: observerEffect,\n        numPhotons: numPhotons,\n        slitWidth: slitWidth // Pass the number of photons to the WaveInterference component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DoubleSlit, {\n        wavelength: wavelength,\n        distance: distance,\n        slitSeparation: slitSeparation,\n        showParticles: showParticles,\n        slitWidth: slitWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"97SfDZWB8OtMZMdlPK3LmfGckRo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WaveInterference","DoubleSlit","jsxDEV","_jsxDEV","App","_s","wavelength","setWavelength","distance","setDistance","slitSeparation","setSlitSeparation","slitWidth","setSlitWidth","showParticles","setShowParticles","observerEffect","setObserverEffect","numPhotons","setNumPhotons","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","value","onChange","e","Number","target","checked","htmlFor","id","step","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport WaveInterference from './WaveInterference';\nimport DoubleSlit from \"./diagramComponent\";\nfunction App() {\n  const [wavelength, setWavelength] = useState(700); // in nanometers\n  const [distance, setDistance] = useState(2000); // distance to screen in mm\n  const [slitSeparation, setSlitSeparation] = useState(250); // slit separation in micrometers\n  const [slitWidth, setSlitWidth] = useState(1);\n  const [showParticles, setShowParticles] = useState(false);\n    \n  const [observerEffect, setObserverEffect] = useState(false);\n  const [numPhotons, setNumPhotons] = useState(10000); // default number of photons\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Double Slit Experiment Simulation</h1>\n      </header>\n      <div className=\"controls\">\n        <label>\n          Wavelength (nm):\n          <input\n            type=\"range\"\n            min=\"380\"\n            max=\"750\"\n            value={wavelength}\n            onChange={(e) => setWavelength(Number(e.target.value))}\n          />\n          {wavelength} nm\n        </label>\n        <label>\n          Distance to Screen (mm):\n          <input\n            type=\"range\"\n            min=\"1000\"\n            max=\"5000\"\n            value={distance}\n            onChange={(e) => setDistance(Number(e.target.value))}\n          />\n          {distance} mm\n        </label>\n        <label>\n          Slit Separation (μm):\n          <input\n            type=\"range\"\n            min=\"300\"\n            max=\"1000\"\n            value={slitSeparation}\n            onChange={(e) => setSlitSeparation(Number(e.target.value))}\n          />\n          {slitSeparation} μm\n        </label>\n        <label>\n          Slit Width (mm):\n          <input\n            type=\"range\"\n            min=\".1\"\n            max=\"4\"\n            value={slitWidth}\n            onChange={(e) => setSlitWidth(Number(e.target.value))}\n          />\n          {slitWidth} mm\n        </label>\n        <label>\n          Show Particles:\n          <input\n            type=\"checkbox\"\n            checked={showParticles}\n            onChange={(e) => setShowParticles(e.target.checked)}\n          />\n        </label>\n        {showParticles && ( // Conditionally render \"Number of Photons\" if showParticles is true\n          <label>\n            Observer Effect:\n            <input\n              type=\"checkbox\"\n              checked={observerEffect}\n              onChange={(e) => setObserverEffect(e.target.checked)}\n            />\n          </label>\n        )}\n        {showParticles && ( // Conditionally render \"Number of Photons\" if showParticles is true\n          <label htmlFor=\"numPhotons\">\n            Number of Photons:\n            <input\n              id=\"numPhotons\"\n              type=\"range\"\n              min=\"100\"\n              max=\"20000\"\n              step=\"100\"\n              value={numPhotons}\n              onChange={(e) => setNumPhotons(Number(e.target.value))}\n            />\n            {numPhotons}\n          </label>\n        )}\n      </div>\n      <div className=\"WaveInterferenceContainer\">\n        <WaveInterference\n          wavelength={wavelength}\n          distance={distance}\n          slitSeparation={slitSeparation}\n          showParticles={showParticles}\n          observerEffect={observerEffect}\n          numPhotons={numPhotons}\n          slitWidth={slitWidth} // Pass the number of photons to the WaveInterference component\n        />\n      </div>\n      <div>\n        <DoubleSlit\n          wavelength={wavelength}\n          distance={distance}\n          slitSeparation={slitSeparation}\n          showParticles={showParticles}\n          slitWidth={slitWidth}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}