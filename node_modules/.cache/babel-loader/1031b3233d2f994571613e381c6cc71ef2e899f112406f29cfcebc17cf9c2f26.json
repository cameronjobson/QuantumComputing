{"ast":null,"code":"// WaveCanvas.js\nimport React,{useRef,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export function wavelengthToColor(wavelength,brightness){var R,G,B,alpha;if(wavelength>=380&&wavelength<440){R=-(wavelength-440)/(440-380);G=0.0;B=1.0;}else if(wavelength>=440&&wavelength<490){R=0.0;G=(wavelength-440)/(490-440);B=1.0;}else if(wavelength>=490&&wavelength<510){R=0.0;G=1.0;B=-(wavelength-510)/(510-490);}else if(wavelength>=510&&wavelength<580){R=(wavelength-510)/(580-510);G=1.0;B=0.0;}else if(wavelength>=580&&wavelength<645){R=1.0;G=-(wavelength-645)/(645-580);B=0.0;}else if(wavelength>=645&&wavelength<=750){R=1.0;G=0.0;B=0.0;}else{R=0.0;G=0.0;B=0.0;// outside the visible spectrum\n}// Increase intensity closer to the vision limits\nif(wavelength>700){alpha=0.3+0.7*(750-wavelength)/(750-700);}else if(wavelength<420){alpha=0.3+0.7*(wavelength-380)/(420-380);}else{alpha=1.0;}R=Math.round(R*alpha*255);G=Math.round(G*alpha*255);B=Math.round(B*alpha*255);return\"rgb(\".concat(brightness*R,\", \").concat(brightness*G,\", \").concat(brightness*B,\")\");}// Example usage:\nvar color=wavelengthToColor(500);// A wavelength of 500nm\nconsole.log(color);// Outputs: rgb(0, 255, 0)\nconst WaveCanvas=_ref=>{let{points,intensity,wavelength}=_ref;const canvasRef=useRef(null);useEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');const width=canvas.width;const height=canvas.height;ctx.clearRect(0,0,width,height);// Clear the canvas before drawing\n// Draw vertical lines based on the intensity array\nfunction mapIntensity(intensity,maxIntensity){// we're just going to make it modify the tolerance on the data\nconst ceilingCover=.05*maxIntensity;let newIntensities=intensity.map(intensity=>intensity/ceilingCover);// if a value is greater than 1, make it 1\n// if a value is less than 0, make it 0\n// newIntensities = newIntensities.map((intensity) =>\n//   intensity > 1 ? 1 : intensity\n// );\nreturn newIntensities;}points.forEach((point,index)=>{const x=index/points.length*width;// get the maximum value of the intensity array\nconst maxIntensity=Math.max(...intensity);// divide all in the intensity array by the max intensity\nintensity=mapIntensity(intensity,maxIntensity);// scale the intensity array to 0-255\nconst brightness=intensity[index];// Scale brightness to 0-255\n// then given some brightness, we take some RGB\nconst RGB=wavelengthToColor(wavelength,brightness);// const color = `rgb(${brightness*RGB[0]},${brightness*RGB[1]},${brightness*RGB[2]})`;\nctx.strokeStyle=RGB;ctx.beginPath();ctx.moveTo(x,0);// Start at the top of the canvas\nctx.lineTo(x,height);// Draw to the bottom of the canvas\nctx.stroke();// Execute the drawing command\n});},[points,intensity]);// Redraw when points or intensity arrays change\nreturn/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:1000,height:200,style:{backgroundColor:'#000000'}});};export default WaveCanvas;","map":{"version":3,"names":["React","useRef","useEffect","jsx","_jsx","wavelengthToColor","wavelength","brightness","R","G","B","alpha","Math","round","concat","color","console","log","WaveCanvas","_ref","points","intensity","canvasRef","canvas","current","ctx","getContext","width","height","clearRect","mapIntensity","maxIntensity","ceilingCover","newIntensities","map","forEach","point","index","x","length","max","RGB","strokeStyle","beginPath","moveTo","lineTo","stroke","ref","style","backgroundColor"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveCanvas.js"],"sourcesContent":["// WaveCanvas.js\n\nimport React, { useRef, useEffect } from 'react';\nexport function wavelengthToColor(wavelength,brightness) {\n    var R, G, B, alpha;\n\n    if (wavelength >= 380 && wavelength < 440) {\n        R = -(wavelength - 440) / (440 - 380);\n        G = 0.0;\n        B = 1.0;\n    } else if (wavelength >= 440 && wavelength < 490) {\n        R = 0.0;\n        G = (wavelength - 440) / (490 - 440);\n        B = 1.0;\n    } else if (wavelength >= 490 && wavelength < 510) {\n        R = 0.0;\n        G = 1.0;\n        B = -(wavelength - 510) / (510 - 490);\n    } else if (wavelength >= 510 && wavelength < 580) {\n        R = (wavelength - 510) / (580 - 510);\n        G = 1.0;\n        B = 0.0;\n    } else if (wavelength >= 580 && wavelength < 645) {\n        R = 1.0;\n        G = -(wavelength - 645) / (645 - 580);\n        B = 0.0;\n    } else if (wavelength >= 645 && wavelength <= 750) {\n        R = 1.0;\n        G = 0.0;\n        B = 0.0;\n    } else {\n        R = 0.0;\n        G = 0.0;\n        B = 0.0; // outside the visible spectrum\n    }\n\n    // Increase intensity closer to the vision limits\n    if (wavelength > 700) {\n        alpha = 0.3 + 0.7 * (750 - wavelength) / (750 - 700);\n    } else if (wavelength < 420) {\n        alpha = 0.3 + 0.7 * (wavelength - 380) / (420 - 380);\n    } else {\n        alpha = 1.0;\n    }\n\n    R = Math.round(R * alpha * 255);\n    G = Math.round(G * alpha * 255);\n    B = Math.round(B * alpha * 255);\n\n    return `rgb(${brightness*R}, ${brightness*G}, ${brightness*B})`;\n}\n\n\n// Example usage:\nvar color = wavelengthToColor(500); // A wavelength of 500nm\nconsole.log(color); // Outputs: rgb(0, 255, 0)\n\nconst WaveCanvas = ({ points, intensity,wavelength }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => { \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height); // Clear the canvas before drawing\n    // Draw vertical lines based on the intensity array\n    function mapIntensity(intensity,maxIntensity){\n      // we're just going to make it modify the tolerance on the data\n      const ceilingCover = .05*maxIntensity;\n      let newIntensities = intensity.map((intensity) =>\n        intensity/ceilingCover\n      );\n      // if a value is greater than 1, make it 1\n      // if a value is less than 0, make it 0\n      // newIntensities = newIntensities.map((intensity) =>\n      //   intensity > 1 ? 1 : intensity\n      // );\n\n         \n      return newIntensities;\n    }\n    points.forEach((point, index) => {\n      const x = (index / points.length) * width;\n      // get the maximum value of the intensity array\n      const maxIntensity = Math.max(...intensity);\n      // divide all in the intensity array by the max intensity\n      \n      intensity =  mapIntensity(intensity,maxIntensity);\n\n      // scale the intensity array to 0-255\n      const brightness = intensity[index];  // Scale brightness to 0-255\n      // then given some brightness, we take some RGB\n      const RGB = wavelengthToColor(wavelength, brightness)\n      // const color = `rgb(${brightness*RGB[0]},${brightness*RGB[1]},${brightness*RGB[2]})`;\n      ctx.strokeStyle = RGB;\n      ctx.beginPath();\n      ctx.moveTo(x, 0);  // Start at the top of the canvas\n      ctx.lineTo(x, height);  // Draw to the bottom of the canvas\n      ctx.stroke();  // Execute the drawing command\n    });\n  }, [points, intensity]);  // Redraw when points or intensity arrays change\n\n  return <canvas ref={canvasRef} width={1000} height={200} style={{ backgroundColor: '#000000' }} />;\n};\n\nexport default WaveCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}