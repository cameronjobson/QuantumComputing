{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/diagramComponent.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles\n}) => {\n  const slitWidth = 20;\n  const visualScalingFactor = .1;\n  const personalSeperation = slitSeparation * visualScalingFactor;\n  const personalDistance = distance * visualScalingFactor;\n  console.log(wavelength, distance, slitSeparation, showParticles);\n  console.log(personalDistance);\n  const drawCanvas = ctx => {\n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n    const drawLine = (info, style = {}) => {\n      const {\n        x,\n        y,\n        x1,\n        y1,\n        thickness = 1\n      } = info;\n      const {\n        color = \"black\",\n        width = thickness\n      } = style;\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x1, y1);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    };\n\n    // Draw slits\n    ctx.fillStyle = \"green\";\n\n    // left slit\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 - slitWidth / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2 - slitWidth / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 + slitWidth / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2 + slitWidth / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n\n    // right slit\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2 - slitWidth / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2 - slitWidth / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2 + slitWidth / 2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2 + slitWidth / 2,\n      y1: canvasHeight + personalDistance - 10\n    });\n    const midHeight = canvasHeight - 10 + 5;\n\n    // connecting bar\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 + slitWidth / 2,\n      x1: canvasWidth / 2 + personalSeperation / 2 - slitWidth / 2,\n      y: midHeight,\n      y1: midHeight\n    });\n\n    // outer bars\n    drawLine({\n      x: 0,\n      x1: canvasWidth / 2 - personalSeperation / 2 - slitWidth / 2,\n      y: midHeight,\n      y1: midHeight\n    });\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2 + slitWidth / 2,\n      x1: canvasWidth,\n      y: midHeight,\n      y1: midHeight\n    });\n    // then we draw a horizontal line between the two slits\n\n    // draw border around canvas\n    // make them thicker\n    ctx.lineWidth = 5;\n    drawLine({\n      x: 0,\n      x1: canvasWidth,\n      y: 0,\n      y1: 0,\n      thickness: 5\n    });\n    drawLine({\n      x: 0,\n      x1: 0,\n      y: 0,\n      y1: canvasHeight,\n      thickness: 5\n    });\n    drawLine({\n      x: canvasWidth,\n      x1: canvasWidth,\n      y: 0,\n      y1: canvasHeight,\n      thickness: 5\n    });\n\n    // Draw wave pattern\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: 500,\n      height: distance / 30,\n      ref: canvas => canvas && drawCanvas(canvas.getContext(\"2d\"))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_c = DoubleSlit;\nexport default DoubleSlit;\nvar _c;\n$RefreshReg$(_c, \"DoubleSlit\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DoubleSlit","wavelength","distance","slitSeparation","showParticles","slitWidth","visualScalingFactor","personalSeperation","personalDistance","console","log","drawCanvas","ctx","clearRect","canvas","width","height","canvasWidth","canvasHeight","drawLine","info","style","x","y","x1","y1","thickness","color","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","fillStyle","midHeight","children","ref","getContext","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/diagramComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n}) => {\n  const slitWidth = 20\n\n\n  const visualScalingFactor = .1\n  const personalSeperation = slitSeparation * visualScalingFactor\n  const personalDistance = distance * visualScalingFactor\n  console.log(wavelength, distance, slitSeparation, showParticles)\n  console.log(personalDistance)\n\n  \n\n  const drawCanvas = (ctx) => {\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n    const drawLine = (info, style = {}) => {\n      const { x, y, x1, y1,thickness = 1 } = info;\n      const { color = \"black\", width=thickness } = style;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x1, y1);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    };\n\n    // Draw slits\n    ctx.fillStyle = \"green\";\n\n\n\n    // left slit\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2-slitWidth/2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2-slitWidth/2,\n      y1: canvasHeight+personalDistance-10,\n    });\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2+slitWidth/2, \n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 - personalSeperation / 2 + slitWidth/2,\n      y1: canvasHeight + personalDistance - 10,\n    });\n\n\n    // right slit\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2-slitWidth/2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2-slitWidth/2,\n      y1: canvasHeight + personalDistance - 10,\n    });\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2+slitWidth/2,\n      y: canvasHeight - 10,\n      x1: canvasWidth / 2 + personalSeperation / 2+slitWidth/2,\n      y1: canvasHeight + personalDistance - 10,\n    });\n\n    const midHeight = canvasHeight - 10 +5;\n\n    // connecting bar\n    drawLine({\n      x: canvasWidth / 2 - personalSeperation / 2 + slitWidth/2,\n      x1: canvasWidth / 2 + personalSeperation / 2-slitWidth/2,\n      y: midHeight,\n      y1: midHeight,\n    });\n\n    // outer bars\n    drawLine({\n      x: 0,\n      x1: canvasWidth / 2 - personalSeperation / 2 - slitWidth / 2,\n      y: midHeight,\n      y1: midHeight,\n    });\n    drawLine({\n      x: canvasWidth / 2 + personalSeperation / 2 + slitWidth / 2,\n      x1: canvasWidth,\n      y: midHeight,\n      y1: midHeight,\n    });\n    // then we draw a horizontal line between the two slits\n\n\n    // draw border around canvas\n    // make them thicker\n    ctx.lineWidth = 5;\n\n    drawLine({\n      x: 0,\n      x1: canvasWidth,\n      y: 0,\n      y1: 0,\n      thickness: 5\n    });\n    drawLine({\n      x: 0,\n      x1: 0,\n      y: 0,\n      y1: canvasHeight,\n      thickness: 5\n    });\n    drawLine({\n      x: canvasWidth,\n      x1: canvasWidth,\n      y: 0,\n      y1: canvasHeight,\n      thickness: 5\n    });\n \n    \n\n\n\n    // Draw wave pattern\n\n  };\n  return (\n    <div>\n      <canvas\n        width={500}\n        height={distance/30}\n        ref={(canvas) => canvas && drawCanvas(canvas.getContext(\"2d\"))}\n      />\n    </div>\n  );\n};\n\nexport default DoubleSlit;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}