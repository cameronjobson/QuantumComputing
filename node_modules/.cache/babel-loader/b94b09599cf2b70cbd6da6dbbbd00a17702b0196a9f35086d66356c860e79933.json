{"ast":null,"code":"import React, { useState } from \"react\";\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n  observerEffect,\n  numPhotons\n}) => {\n  slitDistance = 1e-3;\n  const drawCanvas = ctx => {\n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n\n    // Draw slits\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(canvasWidth / 2 - slitSeparation / 2, canvasHeight - slitDistance, 2, slitDistance);\n    ctx.fillRect(canvasWidth / 2 + slitSeparation / 2, canvasHeight - slitDistance, 2, slitDistance);\n\n    // Draw wave pattern\n    ctx.strokeStyle = \"blue\";\n    ctx.beginPath();\n    for (let x = 0; x < canvasWidth; x++) {\n      const y = canvasHeight / 2 + Math.sin((x - canvasWidth / 2) * 2 * Math.PI / wavelength) * 50;\n      if (x === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.stroke();\n  };\n};\n_c = DoubleSlit;\nexport default DoubleSlit;\nvar _c;\n$RefreshReg$(_c, \"DoubleSlit\");","map":{"version":3,"names":["React","useState","DoubleSlit","wavelength","distance","slitSeparation","showParticles","observerEffect","numPhotons","slitDistance","drawCanvas","ctx","clearRect","canvas","width","height","canvasWidth","canvasHeight","fillStyle","fillRect","strokeStyle","beginPath","x","y","Math","sin","PI","moveTo","lineTo","stroke","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/diagramComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst DoubleSlit = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n  observerEffect,\n  numPhotons,\n}) => {\n    slitDistance = 1e-3\n\n\n  const drawCanvas = (ctx) => {\n    // Clear canvas\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const canvasWidth = ctx.canvas.width;\n    const canvasHeight = ctx.canvas.height;\n\n    // Draw slits\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(\n      canvasWidth / 2 - slitSeparation / 2,\n      canvasHeight - slitDistance,\n      2,\n      slitDistance\n    );\n    ctx.fillRect(\n      canvasWidth / 2 + slitSeparation / 2,\n      canvasHeight - slitDistance,\n      2,\n      slitDistance\n    );\n\n    // Draw wave pattern\n    ctx.strokeStyle = \"blue\";\n    ctx.beginPath();\n    for (let x = 0; x < canvasWidth; x++) {\n      const y =\n        canvasHeight / 2 +\n        Math.sin(((x - canvasWidth / 2) * 2 * Math.PI) / wavelength) * 50;\n      if (x === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.stroke();\n  };\n\n};\n\nexport default DoubleSlit;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,MAAMC,UAAU,GAAGA,CAAC;EAClBC,UAAU;EACVC,QAAQ;EACRC,cAAc;EACdC,aAAa;EACbC,cAAc;EACdC;AACF,CAAC,KAAK;EACFC,YAAY,GAAG,IAAI;EAGrB,MAAMC,UAAU,GAAIC,GAAG,IAAK;IAC1B;IACAA,GAAG,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAED,GAAG,CAACE,MAAM,CAACC,KAAK,EAAEH,GAAG,CAACE,MAAM,CAACE,MAAM,CAAC;IACxD,MAAMC,WAAW,GAAGL,GAAG,CAACE,MAAM,CAACC,KAAK;IACpC,MAAMG,YAAY,GAAGN,GAAG,CAACE,MAAM,CAACE,MAAM;;IAEtC;IACAJ,GAAG,CAACO,SAAS,GAAG,OAAO;IACvBP,GAAG,CAACQ,QAAQ,CACVH,WAAW,GAAG,CAAC,GAAGX,cAAc,GAAG,CAAC,EACpCY,YAAY,GAAGR,YAAY,EAC3B,CAAC,EACDA,YACF,CAAC;IACDE,GAAG,CAACQ,QAAQ,CACVH,WAAW,GAAG,CAAC,GAAGX,cAAc,GAAG,CAAC,EACpCY,YAAY,GAAGR,YAAY,EAC3B,CAAC,EACDA,YACF,CAAC;;IAED;IACAE,GAAG,CAACS,WAAW,GAAG,MAAM;IACxBT,GAAG,CAACU,SAAS,CAAC,CAAC;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,WAAW,EAAEM,CAAC,EAAE,EAAE;MACpC,MAAMC,CAAC,GACLN,YAAY,GAAG,CAAC,GAChBO,IAAI,CAACC,GAAG,CAAE,CAACH,CAAC,GAAGN,WAAW,GAAG,CAAC,IAAI,CAAC,GAAGQ,IAAI,CAACE,EAAE,GAAIvB,UAAU,CAAC,GAAG,EAAE;MACnE,IAAImB,CAAC,KAAK,CAAC,EAAE;QACXX,GAAG,CAACgB,MAAM,CAACL,CAAC,EAAEC,CAAC,CAAC;MAClB,CAAC,MAAM;QACLZ,GAAG,CAACiB,MAAM,CAACN,CAAC,EAAEC,CAAC,CAAC;MAClB;IACF;IACAZ,GAAG,CAACkB,MAAM,CAAC,CAAC;EACd,CAAC;AAEH,CAAC;AAACC,EAAA,GAhDI5B,UAAU;AAkDhB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}