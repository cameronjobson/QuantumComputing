{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Documents/GitHub/QuantumComputingPersonal/src/WaveInterference.js\";\n// WaveInterference.js\n\nimport React from 'react';\nimport * as math from 'mathjs';\nimport WaveCanvas from './WaveCanvas';\nimport ParticleCanvas from './ParticleCanvas';\nimport ObserverEffectCanvas from './ObserverEffectCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveInterference = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n  observerEffect,\n  numPhotons,\n  slitWidth,\n  DoubleSlit\n}) => {\n  // wave interference defines the \n  const points = math.range(-10, 10, 0.02).toArray();\n  const intensity = points.map(x => {\n    const theta = Math.atan(x / distance);\n    const pathDifference = slitSeparation * 1e-6 * Math.sin(theta);\n\n    // we need to define slit width\n    const UnitslitWidth = slitWidth * 1e-6;\n    const beta = Math.PI * UnitslitWidth * Math.sin(theta) / (wavelength * 1e-9);\n    const alpha = Math.PI * slitSeparation * Math.sin(theta) / (wavelength * 1e-9);\n    if (DoubleSlit) {\n      return Math.cos(alpha) ** 2 * Math.pow(Math.sin(beta) / beta, 2);\n    } else {\n      return Math.pow(Math.sin(beta) / beta, 2);\n    }\n    return Math.cos(alpha) ** 2 * Math.pow(Math.sin(beta) / beta, 2);\n  });\n  if (observerEffect) {\n    return /*#__PURE__*/_jsxDEV(ObserverEffectCanvas, {\n      points: points,\n      intensity: intensity,\n      measure: true,\n      wavelength: wavelength,\n      distance: distance,\n      slitSeparation: slitSeparation,\n      slitWidth: slitWidth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  } else if (showParticles) {\n    return /*#__PURE__*/_jsxDEV(ParticleCanvas, {\n      points: points,\n      probabilityDensity: intensity,\n      numPhotons: numPhotons,\n      wavelength: wavelength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(WaveCanvas, {\n      points: points,\n      intensity: intensity,\n      wavelength: wavelength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = WaveInterference;\nexport default WaveInterference;\nvar _c;\n$RefreshReg$(_c, \"WaveInterference\");","map":{"version":3,"names":["React","math","WaveCanvas","ParticleCanvas","ObserverEffectCanvas","jsxDEV","_jsxDEV","WaveInterference","wavelength","distance","slitSeparation","showParticles","observerEffect","numPhotons","slitWidth","DoubleSlit","points","range","toArray","intensity","map","x","theta","Math","atan","pathDifference","sin","UnitslitWidth","beta","PI","alpha","cos","pow","measure","fileName","_jsxFileName","lineNumber","columnNumber","probabilityDensity","_c","$RefreshReg$"],"sources":["/Users/amer_/Documents/GitHub/QuantumComputingPersonal/src/WaveInterference.js"],"sourcesContent":["// WaveInterference.js\n\nimport React from 'react';\nimport * as math from 'mathjs';\nimport WaveCanvas from './WaveCanvas';\nimport ParticleCanvas from './ParticleCanvas';\nimport ObserverEffectCanvas from './ObserverEffectCanvas';\n\n const WaveInterference = ({ wavelength, distance, slitSeparation, showParticles, observerEffect, numPhotons,slitWidth,DoubleSlit }) => {\n  // wave interference defines the \n  const points = math.range(-10, 10, 0.02).toArray();\n  const intensity = points.map(x => {\n    const theta = Math.atan(x / distance);\n    const pathDifference = slitSeparation * 1e-6 * Math.sin(theta);\n\n    // we need to define slit width\n    const UnitslitWidth=slitWidth*1e-6;\n    const beta =\n      (Math.PI * UnitslitWidth * Math.sin(theta)) / (wavelength * 1e-9);\n    const alpha = Math.PI*slitSeparation*Math.sin(theta)/(wavelength*1e-9);\n    if (DoubleSlit){\n      return Math.cos(alpha)**2*Math.pow(Math.sin(beta)/beta,2);\n    }\n    else{\n      return Math.pow(Math.sin(beta)/beta,2);\n    }\n    return Math.cos(alpha)**2*Math.pow(Math.sin(beta)/beta,2);\n  });\n\n  if (observerEffect) {\n    return <ObserverEffectCanvas points={points} intensity={intensity} measure={true} wavelength = {wavelength} \n    distance = {distance} slitSeparation={slitSeparation} slitWidth = {slitWidth} />;\n\n  } else if (showParticles) {\n    return <ParticleCanvas points={points} probabilityDensity={intensity} numPhotons={numPhotons} wavelength={wavelength} />;\n  } else {\n    return <WaveCanvas points={points} intensity={intensity} wavelength={wavelength} />;\n  }\n};\n\nexport default WaveInterference;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}