{"ast":null,"code":"var _jsxFileName = \"/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveInterference.js\";\n// WaveInterference.js\n\nimport React from 'react';\nimport * as math from 'mathjs';\nimport WaveCanvas from './WaveCanvas';\nimport ParticleCanvas from './ParticleCanvas';\nimport ObserverEffectCanvas from './ObserverEffectCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveInterference = ({\n  wavelength,\n  distance,\n  slitSeparation,\n  showParticles,\n  observerEffect,\n  numPhotons\n}) => {\n  // wave interference defines the \n  const points = math.range(-1, 1, 0.02).toArray();\n  const intensity = points.map(x => {\n    const theta = Math.atan(x / distance);\n    const pathDifference = slitSeparation * 1e-6 * Math.sin(theta);\n    const phaseDifference = 2 * Math.PI / (wavelength * 1e-9) * pathDifference;\n    const dropoffTerm = 3.14 * slitSeparation * x / (wavelength * 1e-9) * distance;\n    return Math.pow(Math.sin(phaseDifference / 2), 2);\n  });\n  if (observerEffect) {\n    return /*#__PURE__*/_jsxDEV(ObserverEffectCanvas, {\n      points: points,\n      intensity: intensity,\n      measure: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  } else if (showParticles) {\n    return /*#__PURE__*/_jsxDEV(ParticleCanvas, {\n      points: points,\n      probabilityDensity: intensity,\n      numPhotons: numPhotons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(WaveCanvas, {\n      points: points,\n      intensity: intensity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n};\n_c = WaveInterference;\nexport default WaveInterference;\nvar _c;\n$RefreshReg$(_c, \"WaveInterference\");","map":{"version":3,"names":["React","math","WaveCanvas","ParticleCanvas","ObserverEffectCanvas","jsxDEV","_jsxDEV","WaveInterference","wavelength","distance","slitSeparation","showParticles","observerEffect","numPhotons","points","range","toArray","intensity","map","x","theta","Math","atan","pathDifference","sin","phaseDifference","PI","dropoffTerm","pow","measure","fileName","_jsxFileName","lineNumber","columnNumber","probabilityDensity","_c","$RefreshReg$"],"sources":["/Users/amer_/Desktop/Plugin Development Environment/Plugin Development/.obsidian/plugins/Survey Plugin/QuantumComputing/double-slit-experiment/src/WaveInterference.js"],"sourcesContent":["// WaveInterference.js\n\nimport React from 'react';\nimport * as math from 'mathjs';\nimport WaveCanvas from './WaveCanvas';\nimport ParticleCanvas from './ParticleCanvas';\nimport ObserverEffectCanvas from './ObserverEffectCanvas';\n\nconst WaveInterference = ({ wavelength, distance, slitSeparation, showParticles, observerEffect, numPhotons }) => {\n  // wave interference defines the \n  const points = math.range(-1, 1, 0.02).toArray();\n  const intensity = points.map(x => {\n    const theta = Math.atan(x / distance);\n    const pathDifference = slitSeparation * 1e-6 * Math.sin(theta);\n    const phaseDifference = (2 * Math.PI / (wavelength * 1e-9)) * pathDifference;\n    const dropoffTerm = 3.14*slitSeparation*x/(wavelength*1e-9)*distance;\n    return Math.pow(Math.sin(phaseDifference / 2), 2);\n\n  });\n\n  if (observerEffect) {\n    return <ObserverEffectCanvas points={points} intensity={intensity} measure={true} />;\n  } else if (showParticles) {\n    return <ParticleCanvas points={points} probabilityDensity={intensity} numPhotons={numPhotons} />;\n  } else {\n    return <WaveCanvas points={points} intensity={intensity} />;\n  }\n};\n\nexport default WaveInterference;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,IAAI,MAAM,QAAQ;AAC9B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,cAAc;EAAEC,aAAa;EAAEC,cAAc;EAAEC;AAAW,CAAC,KAAK;EAChH;EACA,MAAMC,MAAM,GAAGb,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAG,CAACC,CAAC,IAAI;IAChC,MAAMC,KAAK,GAAGC,IAAI,CAACC,IAAI,CAACH,CAAC,GAAGV,QAAQ,CAAC;IACrC,MAAMc,cAAc,GAAGb,cAAc,GAAG,IAAI,GAAGW,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;IAC9D,MAAMK,eAAe,GAAI,CAAC,GAAGJ,IAAI,CAACK,EAAE,IAAIlB,UAAU,GAAG,IAAI,CAAC,GAAIe,cAAc;IAC5E,MAAMI,WAAW,GAAG,IAAI,GAACjB,cAAc,GAACS,CAAC,IAAEX,UAAU,GAAC,IAAI,CAAC,GAACC,QAAQ;IACpE,OAAOY,IAAI,CAACO,GAAG,CAACP,IAAI,CAACG,GAAG,CAACC,eAAe,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAEnD,CAAC,CAAC;EAEF,IAAIb,cAAc,EAAE;IAClB,oBAAON,OAAA,CAACF,oBAAoB;MAACU,MAAM,EAAEA,MAAO;MAACG,SAAS,EAAEA,SAAU;MAACY,OAAO,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtF,CAAC,MAAM,IAAItB,aAAa,EAAE;IACxB,oBAAOL,OAAA,CAACH,cAAc;MAACW,MAAM,EAAEA,MAAO;MAACoB,kBAAkB,EAAEjB,SAAU;MAACJ,UAAU,EAAEA;IAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClG,CAAC,MAAM;IACL,oBAAO3B,OAAA,CAACJ,UAAU;MAACY,MAAM,EAAEA,MAAO;MAACG,SAAS,EAAEA;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7D;AACF,CAAC;AAACE,EAAA,GAnBI5B,gBAAgB;AAqBtB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}